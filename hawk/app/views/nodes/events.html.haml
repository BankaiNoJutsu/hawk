- if request.xhr?
  .modal-header
    %button.close{ type: "button", data: { dismiss: "modal" } }
      %span{ aria: { hidden: "true" } }
        &times;
      %span.sr-only
        = _("Close")

    %h3.modal-title
      = icon_text "history", _("Recent events: %{name}" % { name: @node.name }), class: "page"

  .modal-body
    %table#node-events{ data: { toggle: :table, url: ops_cib_state_path("*,#{@node.name}", cib_id: current_cib, format: "json"), sortable: true, sort_name: "last_rc_change", sort_order: "desc", row_style: "eventsRowStyle" } }
      %thead
        %tr
          %th{ data: { field: "rc", sortable: true, formatter: "eventsRC" } }= _("RC")
          %th{ data: { field: "resource", sortable: true } }= _("Resource")
          %th{ data: { field: "op" } }= _("Operation")
          %th{ data: { field: "last_rc_change", sortable: true, sorter: "eventsSorter" } }= _("Last Change")
          %th{ data: { field: "state" } }= _("State")
          %th{ data: { field: "call" } }= _("Call")
          %th{ data: { field: "exec" } }= _("Exec")
          %th{ data: { field: "complete", formatter: "eventsComplete" } }= _("Complete")
      %tbody

  .modal-footer
    %button.btn.btn-default{ type: "button", data: { dismiss: "modal" } }
      = _("Close")
:javascript
  $("#modal,#modal-lg").find("table").bootstrapTable({
    height: Math.max(window.innerHeight - 300, 300)
  });
  function eventsRC(value, row) {
  var desc = "";
    switch (parseInt(value)) {
    case 0: desc = __("success"); break;
    case 1: desc = __('generic error'); break;
    case 2: desc = __('incorrect arguments'); break;
    case 3: desc = __('unimplemented action'); break;
    case 4: desc = __('insufficient permissions'); break;
    case 5: desc = __('installation error'); break;
    case 6: desc = __('configuration error'); break;
    case 7: desc = __('not running'); break;
    case 8: desc = __('running (master)'); break;
    case 9: desc = __('failed (master)'); break;
    default: desc = __('other'); break;
    };
    return '<abbr title="' + desc + '">' + value + '</abbr>';
  }
  function eventsRowStyle(row, index) {
    var rc = parseInt(row.rc);
    if (rc == 8) {
      return { classes: "info" };
    } else if (rc != 0) {
      return { classes: "danger" };
    }
    return {};
  }
  function eventsSorter(a, b) {
    var fmt = 'ddd MMM DD HH:mm:SS YYYY';
    if (moment(a, fmt).isBefore(moment(b, fmt))) {
      return -1;
    } else if (moment(b, fmt).isBefore(moment(a, fmt))) {
      return 1;
    } else {
      return 0;
    }
  }
  function eventsComplete(value, row) {
    if (value == "complete") {
      return '<i class="fa fa-check"></i>';
    } else {
      return '<i class="fa fa-refresh text-muted"></i>';
    }
  }
